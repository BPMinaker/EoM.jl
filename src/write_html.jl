function write_html(
    system::mbd_system,
    results::EoM.analysis,
    verbose::Bool = false;
    plots = [],
    folder::String = "output",
    filename::String = system.name,
    ss = 1:1:length(system.sensors)*length(system.actuators),
    bode = 1:1:length(system.sensors),
    vpt_name = ["u" "Speed" "m/s"],
)
    write_html([system], 0, results, verbose; plots, folder, filename, ss, bode, vpt_name)
end

function write_html(
    systems::Vector{mbd_system},
    vpts,
    results::EoM.analysis,
    verbose::Bool = false;
    plots = [],
    folder::String = "output",
    filename::String = systems[1].name,
    ss = 1:1:length(systems[1].sensors)*length(systems[1].actuators),
    bode = 1:1:length(systems[1].sensors),
    vpt_name = ["u" "Speed" "m/s"],
)

    ## Copyright (C) 2020, Bruce Minaker
    ## write_html.jl is free software; you can redistribute it and/or modify it
    ## under the terms of the GNU General Public License as published by
    ## the Free Software Foundation; either version 2, or (at your option)
    ## any later version.
    ##
    ## write_html.jl is distributed in the hope that it will be useful, but
    ## WITHOUT ANY WARRANTY; without even the implied warranty of
    ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    ## General Public License for more details at www.gnu.org/copyleft/gpl.html.
    ##
    ##--------------------------------------------------------------------

    plotly()

    verbose && println("Writing output...")

    noeigs = false

    # set up the paths
    dirs = setup(folder = folder, data = filename)
    dir_date = dirs[1]
    dir_time = dirs[2]
    dir_data = joinpath(dir_date, dir_time)

    # default html start and end text
    str_open = "<!doctype html>
    <html lang=\"en\" >
    <head>
        <title>EoM Analysis results</title>
        <meta charset=\"utf-8\">
        <meta name=\"description\" content=\"EoM Analysis result\">
        <meta name=\"author\" content=\"automatically generated by EoM\">
        <style>
        table {
        border-collapse: collapse;
        }
        td, th {
        border: 1px solid #dddddd;
        text-align: center;
        padding: 8px;
        }
        tr:nth-child(even) {
        background-color: #dddddd;
        }
        </style>
    </head>
    <body>
    "
    str_close = "
    </body>
    </html>
    "

    # get names of inputs and outputs
    input_names = getfield.(systems[1].actuators, :name)
    input_units = getfield.(systems[1].actuators, :units)
    output_names = getfield.(systems[1].sensors, :name)
    output_units = getfield.(systems[1].sensors, :units)

    # get number of ins, outs, and number of vpts (velocity points)
    nin = length(input_names)
    nout = length(output_names)

    nvpts = length(vpts)

    # open the base html file to write, and start filling it
    output_f = open(joinpath(dir_date, filename * ".html"), "w")
    println(output_f, str_open)
    println(
        output_f,
        "<img src=\"figures/eom_logo.png\" alt=\"Icon\" style=\"width:200px;\">",
    )
    println(output_f, "<h1>Analysis results</h1>")
    println(output_f, "<p>Here are the results of the analysis of: $(systems[1].name)</p>")

    # if there are too many inputs and outputs, skip
    if nin * nout > 0 && nin * nout < 16 && length(ss) > 0
        println(output_f, "<h2>Steady state gains</h2>")
        labels = []
        gain = []
        # loop over outputs and inputs and vpts
        for i in 1:nout
            for j in 1:nin
                n = (i - 1) * nin + j
                if findnext(ss .== n, 1) !== nothing
                    x = zeros(nvpts)
                    for k in 1:nvpts
                        x[k] = my_round(results.ss_resp[k][i, j])
                    end
                    push!(gain, x[1])

                    if output_units[i] == input_units[j]
                        str_u = ""
                    elseif contains(output_units[i], input_units[j])
                        if contains(output_units[i], "/")
                            str_u = " [$(replace(output_units[i], input_units[j] => "1"))]"
                        else
                            str_u = " [$(replace(output_units[i], input_units[j] => ""))]"
                        end
                    else
                        str_u = " [$(output_units[i])/$(input_units[j])]"
                    end
                    lb = "$(output_names[i])/$(input_names[j])$str_u"
                    push!(labels, lb)
                    # if many vpts, make tau plot vs velocity
                    if nvpts > 1
                        p = plot(
                            vpts,
                            x,
                            lw = 2,
                            xlabel = vpt_name[2] * " [" * vpt_name[3] * "]",
                            ylabel = lb,
                            label = "",
                            size = (600, 300),
                        )
                        # save the figure
                        path = joinpath(dir_data, "sstf_$(i)_$(j).html")
                        savefig(p, path)
                        f = open(path, "r")
                        println(output_f, read(f, String))
                        close(f)
                    end
                end
            end
        end

        # if only one vpt, make tau table of the gains
        if nvpts == 1
            str = html_table(["Labels" "Gain"; labels my_round.(gain)])
            println(output_f, str)

            path = joinpath(dir_data, "sstf.html")
            temp = open(path, "w")
            println(temp, str_open, str, str_close)
            close(temp)
        end
    end

    if !noeigs

        # start eigenvalues
        println(output_f, "<h2>Eigenvalues of minimal system</h2>")

        # get eigenvalues
        m = maximum(length.(results.e_val))
        s = zeros(m, nvpts) * 1im
        for i in 1:nvpts
            l = length(results.e_val[i])
            s[1:l, i] = results.e_val[i]
        end

        # for one velocity, chart of calcs from eigenvalues, otherwise plot eigenvalues
        if nvpts == 1
            omega = results.omega_n[1]
            zeta = results.zeta[1]
            tau = results.tau[1]
            lambda = results.lambda[1]

            title = ["No." "σ±ωi [1/s]" "ω_n [Hz]" "ζ" "τ [s]" "λ [s]"]
            str = html_table([title; 1:1:length(tau) my_round.([s omega zeta tau lambda])])
            println(output_f, str)

            path = joinpath(dir_data, "eigen.html")
            temp = open(path, "w")
            println(temp, str_open, str, str_close)
            close(temp)
        else
            # sort all zero roots to top
            #sort!(s, dims = 1, by = abs)

            # plot real and imaginary seperately
            sr = real.(s)
            si = imag.(s)

            # eliminate all zero rows
            tr = []
            for i in 1:size(sr, 1)
                if any(sr[i, :] .!= 0)
                    push!(tr, i)
                end
            end
            sr = sr[tr, :]
            tr = []
            for i in 1:size(si, 1)
                if any(si[i, :] .!= 0)
                    push!(tr, i)
                end
            end
            si = si[tr, :]

            # don't plot zeros - but can't have entire row of NaN
            sr[sr.==0] .= NaN
            si[si.==0] .= NaN

            seriestype = :scatter
            ms = 3
            p = plot(
                xlabel = vpt_name[2] * " [" * vpt_name[3] * "]",
                ylabel = "Eigenvalue [1/s]",
                size = (600, 300),
            )

            rr = vec(sr')
            mc = RGB(0 / 255, 154 / 255, 250 / 255)
            label = "Real"
            u = size(sr, 1)
            vv = vcat(fill(vpts, u)...)
            plot!(p, vv, rr; seriestype, mc, ms, label)

            rr = vec(si')
            mc = RGB(227 / 255, 111 / 255, 71 / 255)
            label = "Imaginary"
            u = size(si, 1)
            vv = vcat(fill(vpts, u)...)
            plot!(p, vv, rr; seriestype, mc, ms, label)

            # save the figure
            path = joinpath(dir_data, "eigen.html")
            savefig(p, path)
            f = open(path, "r")
            println(output_f, read(f, String))
            close(f)

            label = ""

            omega = unique.(results.omega_n)
            nf = maximum(unique(length.(omega)))

            for i in 1:length(omega)
                if length(omega[i]) < nf
                    append!(omega[i], zeros(nf - length(omega[i])) * NaN)
                end
            end
            omega = hcat(omega...)'
            omega[omega.==0] .= NaN

            po = plot(xlabel = "", ylabel = "Natural frequency [Hz]", size = (600, 300))
            mc = RGB(0 / 255, 154 / 255, 250 / 255)
            if size(omega, 2) > 0
                plot!(po, vpts, omega; seriestype, mc, ms, label)
            end

            zeta = unique.(results.zeta)
            nf = maximum(unique(length.(zeta)))

            for i in 1:length(zeta)
                if length(zeta[i]) < nf
                    append!(zeta[i], zeros(nf - length(zeta[i])) * NaN)
                end
            end
            zeta = hcat(zeta...)'

            pz = plot(
                xlabel = vpt_name[2] * " [" * vpt_name[3] * "]",
                ylabel = "Damping ratio",
                size = (600, 300),
            )
            mc = RGB(0 / 255, 154 / 255, 250 / 255)
            if size(zeta, 2) > 0
                plot!(pz, vpts, zeta; seriestype, mc, ms, label)
            end

            p = plot(po, pz, layout = grid(2, 1), size = (600, 400))
            path = joinpath(dir_data, "omega_zeta.html")
            savefig(p, path)
            f = open(path, "r")
            println(output_f, read(f, String))
            close(f)

            tau = unique.(results.tau)
            nf = maximum(unique(length.(tau)))

            for i in 1:length(tau)
                if length(tau[i]) < nf
                    append!(tau[i], zeros(nf - length(tau[i])) * NaN)
                end
                tau[i][any.(abs.(tau[i]) .> 1e4)] .= 0
            end
            tau = hcat(tau...)'
            tau[tau.==0] .= NaN

            pt = plot(xlabel = "", ylabel = "Time constant [s]", size = (600, 300))
            mc = RGB(0 / 255, 154 / 255, 250 / 255)
            if size(tau, 2) > 0
                plot!(pt, vpts, tau; seriestype, mc, ms, label)
            end

            lambda = unique.(results.lambda)
            nf = maximum(unique(length.(lambda)))

            for i in 1:length(lambda)
                if length(lambda[i]) < nf
                    append!(lambda[i], zeros(nf - length(lambda[i])) * NaN)
                end
                lambda[i][any.(abs.(lambda[i]) .> 1e4)] .= 0
            end
            lambda = hcat(lambda...)'
            lambda[lambda.==0] .= NaN

            pl = plot(
                xlabel = vpt_name[2] * " [" * vpt_name[3] * "]",
                ylabel = "Wavelength [s]",
                size = (600, 300),
            )
            mc = RGB(0 / 255, 154 / 255, 250 / 255)
            if size(lambda, 2) > 0
                plot!(pl, vpts, lambda; seriestype, mc, ms, label)
            end

            p = plot(pt, pl, layout = grid(2, 1), size = (600, 400))
            path = joinpath(dir_data, "tau_lambda.html")
            savefig(p, path)
            f = open(path, "r")
            println(output_f, read(f, String))
            close(f)

        end

        # print instant centre of body 1
        if nvpts == 1
            println(output_f, "<h2>Rotation centres of first body for all modes</h2>")
            temp = my_round.([results.mode_vals[1] (results.centre[1][1:6, 1:end])'])
            str = html_table(
                [
                    ["No." "Eigenvalue" "x" "y" "z" "u_x" "u_y" "u_z"]
                    1:1:size(temp, 1) temp
                ],
            )
            println(output_f, str)

            path = joinpath(dir_data, "centres.html")
            tmp2 = open(path, "w")
            println(tmp2, str_open, str, str_close)
            close(tmp2)
        end
    end

    # if there are too many inputs and outputs, skip
    if nin * nout > 0 && length(bode) > 0 && nin * nout < 16
        println(output_f, "<h2>Bode plots</h2>")
        # pick out up to four representative vpts from the list
        l = unique(Int.(round.((nvpts - 1) .* [1, 3, 5, 7] / 8 .+ 1)))
        if length(l) == 1
            for i in 1:nin
                # fill in for each selected vpt
                w = results.w[l[1]] / 2 / pi
                mag = cat(results.mag[l[1]]..., dims = 3)[bode, i, :]
                phs = cat(results.phase[l[1]]..., dims = 3)[bode, i, :]
                phs[phs.>0] .-= 360
                phs[findall(diff(phs, dims = 2) .> 300)] .= Inf
                phs[findall(diff(phs, dims = 2) .< -300)] .= Inf
                label = hcat(output_names[bode]...)
                label .*= "/" * input_names[i]
                xscale = :log10
                xticks =
                    10.0 .^ collect(Int(round(log10(w[1]))):1:Int(round(log10(w[end]))))
                p1 = plot(
                    w,
                    mag';
                    lw = 2,
                    label,
                    xlabel = "",
                    ylabel = "Gain [dB]",
                    xscale,
                    xticks,
                    ylims = (-60, Inf),
                )
                p2 = plot(
                    w,
                    phs';
                    lw = 2,
                    label = "",
                    xlabel = "Frequency [Hz]",
                    ylabel = "Phase [deg]",
                    xscale,
                    xticks,
                    ylims = (-360, 0),
                    yticks = -360:60:0,
                )
                # merge two subplots
                p = plot(
                    p1,
                    p2,
                    layout = grid(2, 1, heights = [0.66, 0.33]),
                    size = (600, 450),
                )
                # save the figure
                path = joinpath(dir_data, "bode_$i.html")
                savefig(p, path)
                f = open(path, "r")
                println(output_f, read(f, String))
                close(f)
            end
        else
            # loop over outputs and inputs and selected vpts
            for i in 1:nout
                for j in 1:nin
                    n = (i - 1) * nin + j
                    if !(findnext(bode .== i, 1) === nothing)
                        # make empty plots of magnitude and phase
                        xscale = :log10
                        w = results.w[1] / 2 / pi
                        xticks =
                            10.0 .^
                            collect(Int(round(log10(w[1]))):1:Int(round(log10(w[end]))))
                        ylabel = "|$(output_names[i])|/|$(input_names[j])| [dB]"
                        p1 = plot(; xlabel = "", ylabel, xscale, xticks, legend = :top)
                        ylabel = "∠ $(output_names[i])/$(input_names[j]) [deg]"
                        p2 = plot(;
                            xlabel = "Frequency [Hz]",
                            ylabel,
                            xscale,
                            xticks,
                            ylims = (-360, 0),
                            yticks = -360:60:0,
                        )
                        # fill in for each selected vpt
                        for k in l
                            w = results.w[k] / 2 / pi
                            mag = cat(results.mag[k]..., dims = 3)[i, j, :]
                            phs = cat(results.phase[k]..., dims = 3)[i, j, :]
                            phs[phs.>0] .-= 360
                            # set wrap arounds in phase to Inf to avoid jumps in plot
                            phs[findall(abs.(diff(phs)) .> 180)] .= Inf
                            if length(l) == 1
                                lb = ""
                            else
                                lb = vpt_name[1] * "=$(my_round(vpts[k])) " * vpt_name[3]
                            end
                            p1 = plot!(p1, w, mag, lw = 2, label = lb)
                            p2 = plot!(p2, w, phs, lw = 2, label = "")
                            # merge two subplots
                            p = plot(
                                p1,
                                p2,
                                layout = grid(2, 1, heights = [0.66, 0.33]),
                                size = (600, 450),
                            )
                        end
                        # save the figure
                        path = joinpath(dir_data, "bode_$(i)_$(j).html")
                        savefig(p, path)
                        f = open(path, "r")
                        println(output_f, read(f, String))
                        close(f)
                    end
                end
            end
        end
    end

    n = length(plots)
    if n > 0
        println(output_f, "<h2>Time history and other plots</h2>")
    end
    for i in 1:n
        # save the figure
        path = joinpath(dir_data, "plot_$(i).html")
        savefig(plots[i], path)
        f = open(path, "r")
        println(output_f, read(f, String))
        close(f)
    end

    # add the static preloads
    println(output_f, "<h2>Preloads of first system</h2>")

    temp = ["Connector" "f_x" "f_y" "f_z" "m_x" "m_y" "m_z"]
    for item in [
        systems[1].rigid_points
        systems[1].flex_points
        systems[1].springs
        systems[1].links
    ]
        temp = vcat(temp, [item.name my_round.(item.force') my_round.(item.moment')])
    end

    #=    for item in the_system.beams
           println(preload_f, "{$idx} {" * item.name * "} shear $(item.force[1][1]), $(item.force[1][2]), $(item.force[1][3]), $(norm(force[1]))")
           println(preload_f, "{} {} moment $(item.moment[1][1]), $(item.moment[1][2]), $(item.moment[1][3]), $(norm(item.moment[1]))")
           println(preload_f, "{} {} shear $(item.force[2][1]), $(item.force[2][2]), $(item.force[2][3]), $(norm(item.force[2]))")
           println(preload_f, "{} {} moment $(item.moment[2][1]), $(item.moment[2][2]), $(item.moment[2][3]), $(norm(item.moment[2]))")
           idx += 1
       end =#

    str = html_table(temp)
    println(output_f, str)

    path = joinpath(dir_data, "preloads.html")
    tmp2 = open(path, "w")
    println(tmp2, str_open, str, str_close)
    close(tmp2)
    # print the end and close the output
    println(output_f, str_close)
    close(output_f)

    verbose && println("Output file written.")
    nothing
end

function html_table(mtx)
    # function to put array into html format
    n, m = size(mtx)

    str = "<table><thead>\n<tr>"
    for i in mtx[1, :]
        str *= "<th>$i</th>"
    end
    str *= "</tr>\n</thead><tbody>\n"
    for i in 2:n
        str *= "<tr>"
        for j in mtx[i, :]
            if j isa String || imag(j) != 0
                str *= "<td>$j</td>"
            else
                str *= "<td>$(real(j))</td>"
            end
        end
        str *= "</tr>\n"
    end
    str *= "</tbody></table>"
    str
end
